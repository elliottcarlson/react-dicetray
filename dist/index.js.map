{"mappings":";;;;;;;;;;;;;ACAA;;ACAA;;;ACgCO,MAAM,4CAA0C;IACnD,WAAW;IACX,SAAS;IACT,MAAM;IACN,UAAU;IACV,aAAa;IACb,gBAAgB;IAChB,eAAe;IACf,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,eAAe;IACf,WAAW,IAAI;IACf,OAAO;IACP,gBAAgB;IAChB,eAAe,IAAI;IACnB,oBAAoB;IACpB,OAAO;IACP,YAAY;IACZ,OAAO;IACP,mBAAmB,KAAK;IACxB,QAAQ,SAAS,MAAM;IACvB,SAAS,IAAM,CAAC;IAChB,eAAe,IAAM,CAAC;IACtB,gBAAgB,IAAM,CAAC;IACvB,kBAAkB,IAAM,CAAC;IACzB,qBAAqB,IAAM,CAAC;IAC5B,eAAe,IAAM,CAAC;AAC1B;;;;ADvDA,MAAM,iCAAW,IAAM;IACnB,OAAO,gBAAgB,OAAO,CAAC,QAAQ,CAAA,IAAK;QACxC,MAAM,IAAI,AAAC,KAAK,MAAM,KAAK,KAAM;QACjC,MAAM,IAAI,MAAM,MAAM,IAAI,AAAC,IAAI,MAAO,GAAG;QACzC,OAAO,EAAE,QAAQ,CAAC;IACtB;AACJ;AAGe,uDAAuB,CAAA,GAAA,sCAAK,AAAD,EAAE,aAAa;IAMrD,YAAY,KAAqB,CAAE;QAC/B,KAAK,CAAC;QAEN,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;QAE5B,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,EAAE,GAAG;IACd;IAEA,oBAAoB;QAChB,IAAI,UAAU;YAAE,GAAG,CAAA,GAAA,yCAAsB,CAAC;YAAE,GAAG,IAAI,CAAC,KAAK;QAAC;QAC1D,OAAO,QAAQ,OAAO;QAEtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA,GAAA,8CAAO,AAAD,EACrB,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EACb;QAGJ,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAM;YAC3B,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,YAAY,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO;QAC5F;IACJ;IAEA,SAAS;QACL,qBACI,gCAAC;YAAI,IAAI,IAAI,CAAC,EAAE;YAAE,WAAU;;IAEpC;AACJ;;;AD5CA,MAAM,oCAAc,CAAC,iBAA0C,CAAC,CAAC,GAAK;IACpE,MAAM,MAAM,CAAA,GAAA,mBAAK,EAAE,IAAI;IACvB,MAAM,yBAAW,gCAAC,CAAA,GAAA,wCAAQ,AAAD;QAAE,KAAK;QAAM,GAAG,cAAc;;IAEvD,MAAM,WAAW,CAAC,WAAsC;QACtD,IAAI,OAAO,EAAE,SAAS,KAAK,YAAY;IACzC;IAEA,MAAM,eAAe,CAAC,SAAoC;QACxD,IAAI,OAAO,EAAE,SAAS,aAAa;IACrC;IAEA,OAAO;kBACL;kBACA;sBACA;IACF;AACF;IAEA,2CAAe;;ADvBf","sources":["src/index.ts","src/useDiceTray.tsx","src/components/DiceTray.tsx","src/config.ts"],"sourcesContent":["export { default as useDiceTray } from './useDiceTray';","import React, { useRef } from 'react';\r\nimport { DiceTrayConfig } from './config';\r\nimport DiceTray from './components/DiceTray';\r\n\r\nconst useDiceTray = (diceTrayConfig: Partial<DiceTrayConfig> = {}) => {\r\n  const ref = useRef(null);\r\n  const diceTray = <DiceTray ref={ref} {...diceTrayConfig} />;\r\n\r\n  const rollDice = (notation?: string | Array<string>) => {\r\n    ref.current?.DiceBox?.roll(notation ?? '1d20');\r\n  };\r\n\r\n  const updateConfig = (config: Partial<DiceTrayConfig>) => {\r\n    ref.current?.DiceBox?.updateConfig(config);\r\n  }\r\n\r\n  return {\r\n    diceTray,\r\n    rollDice,\r\n    updateConfig,\r\n  }\r\n}\r\n\r\nexport default useDiceTray;","import React from 'react';\r\nimport DiceBox from '@3d-dice/dice-box';\r\nimport { DEFAULT_DICETRAY_CONFIG, DiceTrayConfig } from '../config';\r\nimport './DiceTray.css';\r\n\r\nconst createId = () => {\r\n    return 'tray-xxxxxxxx'.replace(/[x]/g, c => {\r\n        const r = (Math.random() * 16) | 0;\r\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\r\n\r\n\r\nexport default class DiceTray extends React.PureComponent<DiceTrayConfig> {\r\n    id: string;\r\n    props: DiceTrayConfig;\r\n    DiceBox: any;\r\n    onReady: Function;\r\n\r\n    constructor(props: DiceTrayConfig) {\r\n        super(props);\r\n\r\n        this.onReady = props.onReady;\r\n\r\n        this.props = props;\r\n        this.id = createId();\r\n    }\r\n\r\n    componentDidMount() {\r\n        let options = { ...DEFAULT_DICETRAY_CONFIG, ...this.props };\r\n        delete options.onReady;\r\n\r\n        this.DiceBox = new DiceBox(\r\n            `#${this.id}`,\r\n            options\r\n        );\r\n\r\n        this.DiceBox.init().then(() => {\r\n            if (typeof this.onReady === 'function') this.onReady(this.DiceBox.roll.bind(this.DiceBox));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.id} className='react-dicetray' />\r\n        );\r\n    }\r\n}","import { Roll } from './types';\r\n\r\nexport interface DiceTrayConfig {\r\n    assetPath?: string,\r\n    gravity?: number,\r\n    mass?: number,\r\n    friction?: number,\r\n    restitution?: number,\r\n    angularDamping?: number,\r\n    linearDamping?: number,\r\n    spinForce?: number,\r\n    throwForce?: number,\r\n    startingHeight?: number,\r\n    settleTimeout?: number,\r\n    offscreen?: boolean,\r\n    delay?: number,\r\n    lightIntensity?: number,\r\n    enableShadows?: boolean,\r\n    shadowTransparency?: number,\r\n    theme?: string,\r\n    themeColor?: string,\r\n    scale?: number,\r\n    suspendSimulation?: boolean,\r\n    origin?: string,\r\n    onReady?(rollDice?: Function): void,\r\n    onDieComplete?(): void,\r\n    onRollComplete?(results: Array<Roll>): void,\r\n    onRemoveComplete?(): void,\r\n    onThemeConfigLoaded?(): void,\r\n    onThemeLoaded?(): void,\r\n}\r\n\r\nexport const DEFAULT_DICETRAY_CONFIG: DiceTrayConfig = {\r\n    assetPath: '/assets/',\r\n    gravity: 1,\r\n    mass: 1,\r\n    friction: 0.8,\r\n    restitution: 0,\r\n    angularDamping: 0.4,\r\n    linearDamping: 0.4,\r\n    spinForce: 4,\r\n    throwForce: 5,\r\n    startingHeight: 8,\r\n    settleTimeout: 5000,\r\n    offscreen: true,\r\n    delay: 10,\r\n    lightIntensity: 1,\r\n    enableShadows: true,\r\n    shadowTransparency: 0.8,\r\n    theme: 'default',\r\n    themeColor: '#2e8555',\r\n    scale: 6,\r\n    suspendSimulation: false,\r\n    origin: location.origin,\r\n    onReady: () => {},\r\n    onDieComplete: () => {},\r\n    onRollComplete: () => {},\r\n    onRemoveComplete: () => {},\r\n    onThemeConfigLoaded: () => {},\r\n    onThemeLoaded: () => {},\r\n}"],"names":[],"version":3,"file":"index.js.map"}